[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "feature-workflow-mcp"
version = "0.1.0"
description = "MCP server for automated feature development workflows with Claude Code"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Ondrej Svec", email = "ondrej@aibility.cz"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Tools",
    "Topic :: Software Development :: Version Control :: Git",
]
dependencies = [
    # Core MCP and async
    "mcp>=1.0.0",
    "pydantic>=2.10.0,<3.0.0",
    "pydantic-settings>=2.5.0,<3.0.0",
    "httpx>=0.27.0,<0.28.0",
    
    # Git operations
    "GitPython>=3.1.40,<4.0.0",
    
    # API integrations
    "PyGithub==2.3.0",
    "python-gitlab==4.10.0",
    
    # CLI and utilities
    "typer==0.12.3",
    "rich==13.7.1",
    "click==8.1.7",
    "python-dotenv==1.0.1",
    
    # Security
    "cryptography==42.0.5",
    "pyjwt==2.8.0",
    "keyring==24.3.1",
    
    # Monitoring
    "watchdog==4.0.1",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest==8.4.1",
    "pytest-asyncio==1.0.0",
    "pytest-httpx>=0.30.0",
    "pytest-mock==3.14.0",
    "coverage==7.6.7",
    
    # Code quality
    "black==24.10.0",
    "ruff==0.8.4",
    "mypy==1.13.0",
    "pre-commit==4.0.1",
    
    # Development tools
    "ipython",
    "jupyter",
]

[project.urls]
Homepage = "https://github.com/aibility/feature-workflow-mcp"
Repository = "https://github.com/aibility/feature-workflow-mcp.git"
Issues = "https://github.com/aibility/feature-workflow-mcp/issues"

[project.scripts]
feature-workflow-mcp = "feature_workflow.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-args
    "SIM118", # key-in-dict
    "ICN001", # import-conventions
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
    "W191", # indentation contains tabs
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["ARG001", "S101"]

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "git.*",
    "github.*",
    "gitlab.*",
    "watchdog.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=feature_workflow",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]